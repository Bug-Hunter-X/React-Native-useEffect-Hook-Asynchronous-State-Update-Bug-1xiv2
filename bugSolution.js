The solution uses the `useState` hook to manage the component's state, ensuring that updates are properly reflected in the UI. The `useEffect` hook is used to perform the asynchronous operation, but the state update is done directly within the `useEffect` function, using the functional form of the `setState` method. This approach guarantees that the component's state is updated correctly before the re-render. The key difference is that we are updating state using the functional update provided by the `setState` hook, which helps avoid race conditions and ensures that the state is updated properly.